void bstree_swap_nodes(ptrBinarySearchTree *tree, ptrBinarySearchTree from, ptrBinarySearchTree to) {
    assert(!bstree_empty(*tree) && from && to);

    if (from == to) // Rien à faire si les nœuds sont les mêmes
        return;

    ptrBinarySearchTree fromPar = from->parent;
    ptrBinarySearchTree toPar = to->parent;
    ptrBinarySearchTree fromLeft = from->left;
    ptrBinarySearchTree fromRight = from->right;
    ptrBinarySearchTree toLeft = to->left;
    ptrBinarySearchTree toRight = to->right;

    // Mettre à jour les liens parent-enfant pour les nœuds enfants
    if (fromLeft) fromLeft->parent = to;
    if (fromRight) fromRight->parent = to;
    if (toLeft) toLeft->parent = from;
    if (toRight) toRight->parent = from;

    // Mettre à jour les liens parent-enfant pour les nœuds parents
    if (fromPar) {
        if (fromPar->left == from)
            fromPar->left = to;
        else
            fromPar->right = to;
    } else {
        *tree = to; // Mettre à jour l'arbre si from est la racine
    }

    if (toPar) {
        if (toPar->left == to)
            toPar->left = from;
        else
            toPar->right = from;
    } else {
        *tree = from; // Mettre à jour l'arbre si to est la racine
    }

    // Mettre à jour les liens parent des nœuds échangés
    ptrBinarySearchTree tempParent = from->parent;
    from->parent = to->parent;
    to->parent = tempParent;

    // Échanger les enfants
    from->left = toLeft;
    from->right = toRight;
    to->left = fromLeft;
    to->right = fromRight;
}